// Generated by Dagger (https://dagger.dev).
package dev.alimansour.iweather.presentation;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentActivity;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.google.gson.Gson;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ActivityModule_ProvideFragmentActivityFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import dev.alimansour.iweather.data.local.LocalDataSource;
import dev.alimansour.iweather.data.local.WeatherDatabase;
import dev.alimansour.iweather.data.remote.RemoteDataSource;
import dev.alimansour.iweather.data.remote.WeatherAPIService;
import dev.alimansour.iweather.domain.repository.WeatherRepository;
import dev.alimansour.iweather.domain.usecase.city.AddCityUseCase;
import dev.alimansour.iweather.domain.usecase.city.GetCitiesUseCase;
import dev.alimansour.iweather.domain.usecase.city.GetHistoricalDataUseCase;
import dev.alimansour.iweather.presentation.cities.CitiesAdapter;
import dev.alimansour.iweather.presentation.cities.CitiesFragment;
import dev.alimansour.iweather.presentation.cities.CitiesFragment_MembersInjector;
import dev.alimansour.iweather.presentation.cities.CitiesViewModel;
import dev.alimansour.iweather.presentation.cities.CitiesViewModelFactory;
import dev.alimansour.iweather.presentation.di.AppModule;
import dev.alimansour.iweather.presentation.di.AppModule_ProvideLocalDataSourceFactory;
import dev.alimansour.iweather.presentation.di.AppModule_ProvideRemoteDataSourceFactory;
import dev.alimansour.iweather.presentation.di.AppModule_ProvideWeatherRepositoryFactory;
import dev.alimansour.iweather.presentation.di.MainModule_ProvideCitiesViewModelFactory;
import dev.alimansour.iweather.presentation.di.MainModule_ProvideHistoricalViewModelFactoryFactory;
import dev.alimansour.iweather.presentation.di.RetrofitModule;
import dev.alimansour.iweather.presentation.di.RetrofitModule_ProvideRequestInterceptorFactory;
import dev.alimansour.iweather.presentation.di.RetrofitModule_ProvideWeatherAPIServiceFactory;
import dev.alimansour.iweather.presentation.di.RetrofitModule_ProvidesGsonFactory;
import dev.alimansour.iweather.presentation.di.RetrofitModule_ProvidesHttpLoggingInterceptorFactory;
import dev.alimansour.iweather.presentation.di.RetrofitModule_ProvidesOkHttpClientFactory;
import dev.alimansour.iweather.presentation.di.RetrofitModule_ProvidesRetrofitClientFactory;
import dev.alimansour.iweather.presentation.di.RoomModule;
import dev.alimansour.iweather.presentation.di.RoomModule_ProvideWeatherDatabaseFactory;
import dev.alimansour.iweather.presentation.historical.HistoricalAdapter;
import dev.alimansour.iweather.presentation.historical.HistoricalFragment;
import dev.alimansour.iweather.presentation.historical.HistoricalFragment_MembersInjector;
import dev.alimansour.iweather.presentation.historical.HistoricalViewModel;
import dev.alimansour.iweather.presentation.historical.HistoricalViewModelFactory;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMyApplication_HiltComponents_SingletonC extends MyApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DaggerMyApplication_HiltComponents_SingletonC singletonC = this;

  private Provider<HttpLoggingInterceptor> providesHttpLoggingInterceptorProvider;

  private Provider<Interceptor> provideRequestInterceptorProvider;

  private Provider<OkHttpClient> providesOkHttpClientProvider;

  private Provider<Gson> providesGsonProvider;

  private Provider<Retrofit> providesRetrofitClientProvider;

  private Provider<WeatherAPIService> provideWeatherAPIServiceProvider;

  private Provider<RemoteDataSource> provideRemoteDataSourceProvider;

  private Provider<WeatherDatabase> provideWeatherDatabaseProvider;

  private Provider<LocalDataSource> provideLocalDataSourceProvider;

  private Provider<WeatherRepository> provideWeatherRepositoryProvider;

  private DaggerMyApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    initialize(applicationContextModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private OkHttpClient okHttpClient() {
    return RetrofitModule_ProvidesOkHttpClientFactory.providesOkHttpClient(providesHttpLoggingInterceptorProvider.get(), provideRequestInterceptorProvider.get());
  }

  private Retrofit retrofit() {
    return RetrofitModule_ProvidesRetrofitClientFactory.providesRetrofitClient(providesOkHttpClientProvider.get(), providesGsonProvider.get());
  }

  private WeatherAPIService weatherAPIService() {
    return RetrofitModule_ProvideWeatherAPIServiceFactory.provideWeatherAPIService(providesRetrofitClientProvider.get());
  }

  private RemoteDataSource remoteDataSource() {
    return AppModule_ProvideRemoteDataSourceFactory.provideRemoteDataSource(provideWeatherAPIServiceProvider.get());
  }

  private WeatherDatabase weatherDatabase() {
    return RoomModule_ProvideWeatherDatabaseFactory.provideWeatherDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private LocalDataSource localDataSource() {
    return AppModule_ProvideLocalDataSourceFactory.provideLocalDataSource(provideWeatherDatabaseProvider.get());
  }

  private WeatherRepository weatherRepository() {
    return AppModule_ProvideWeatherRepositoryFactory.provideWeatherRepository(provideRemoteDataSourceProvider.get(), provideLocalDataSourceProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam) {
    this.providesHttpLoggingInterceptorProvider = DoubleCheck.provider(new SwitchingProvider<HttpLoggingInterceptor>(singletonC, 5));
    this.provideRequestInterceptorProvider = DoubleCheck.provider(new SwitchingProvider<Interceptor>(singletonC, 6));
    this.providesOkHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonC, 4));
    this.providesGsonProvider = DoubleCheck.provider(new SwitchingProvider<Gson>(singletonC, 7));
    this.providesRetrofitClientProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonC, 3));
    this.provideWeatherAPIServiceProvider = DoubleCheck.provider(new SwitchingProvider<WeatherAPIService>(singletonC, 2));
    this.provideRemoteDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<RemoteDataSource>(singletonC, 1));
    this.provideWeatherDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<WeatherDatabase>(singletonC, 9));
    this.provideLocalDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<LocalDataSource>(singletonC, 8));
    this.provideWeatherRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<WeatherRepository>(singletonC, 0));
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  @Override
  public void injectMyApplication(MyApplication myApplication) {
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder retrofitModule(RetrofitModule retrofitModule) {
      Preconditions.checkNotNull(retrofitModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder roomModule(RoomModule roomModule) {
      Preconditions.checkNotNull(roomModule);
      return this;
    }

    public MyApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerMyApplication_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MyApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public MyApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements MyApplication_HiltComponents.ActivityC.Builder {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements MyApplication_HiltComponents.FragmentC.Builder {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements MyApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements MyApplication_HiltComponents.ViewC.Builder {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements MyApplication_HiltComponents.ViewModelC.Builder {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements MyApplication_HiltComponents.ServiceC.Builder {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends MyApplication_HiltComponents.ViewWithFragmentC {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends MyApplication_HiltComponents.FragmentC {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    @Override
    public void injectCitiesFragment(CitiesFragment citiesFragment) {
      injectCitiesFragment2(citiesFragment);
    }

    @Override
    public void injectHistoricalFragment(HistoricalFragment historicalFragment) {
      injectHistoricalFragment2(historicalFragment);
    }

    private CitiesFragment injectCitiesFragment2(CitiesFragment instance) {
      CitiesFragment_MembersInjector.injectCitiesAdapter(instance, new CitiesAdapter());
      CitiesFragment_MembersInjector.injectViewModel(instance, activityCImpl.citiesViewModel());
      return instance;
    }

    private HistoricalFragment injectHistoricalFragment2(HistoricalFragment instance) {
      HistoricalFragment_MembersInjector.injectHistoricalAdapter(instance, new HistoricalAdapter());
      HistoricalFragment_MembersInjector.injectViewModel(instance, activityCImpl.historicalViewModel());
      return instance;
    }
  }

  private static final class ViewCImpl extends MyApplication_HiltComponents.ViewC {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends MyApplication_HiltComponents.ActivityC {
    private final Activity activity;

    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private Provider<FragmentActivity> provideFragmentActivityProvider;

    private ActivityCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activity = activityParam;
      initialize(activityParam);

    }

    private FragmentActivity fragmentActivity() {
      return ActivityModule_ProvideFragmentActivityFactory.provideFragmentActivity(activity);
    }

    private GetCitiesUseCase getCitiesUseCase() {
      return new GetCitiesUseCase(singletonC.provideWeatherRepositoryProvider.get());
    }

    private AddCityUseCase addCityUseCase() {
      return new AddCityUseCase(singletonC.provideWeatherRepositoryProvider.get());
    }

    private CitiesViewModelFactory citiesViewModelFactory() {
      return new CitiesViewModelFactory(getCitiesUseCase(), addCityUseCase());
    }

    private CitiesViewModel citiesViewModel() {
      return MainModule_ProvideCitiesViewModelFactory.provideCitiesViewModel(provideFragmentActivityProvider.get(), citiesViewModelFactory());
    }

    private GetHistoricalDataUseCase getHistoricalDataUseCase() {
      return new GetHistoricalDataUseCase(singletonC.provideWeatherRepositoryProvider.get());
    }

    private HistoricalViewModelFactory historicalViewModelFactory() {
      return new HistoricalViewModelFactory(getHistoricalDataUseCase());
    }

    private HistoricalViewModel historicalViewModel() {
      return MainModule_ProvideHistoricalViewModelFactoryFactory.provideHistoricalViewModelFactory(provideFragmentActivityProvider.get(), historicalViewModelFactory());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final Activity activityParam) {
      this.provideFragmentActivityProvider = SingleCheck.provider(new SwitchingProvider<FragmentActivity>(singletonC, activityRetainedCImpl, activityCImpl, 0));
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), Collections.<String>emptySet(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return Collections.<String>emptySet();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
      injectMainActivity2(mainActivity);
    }

    private MainActivity injectMainActivity2(MainActivity instance) {
      MainActivity_MembersInjector.injectViewModel(instance, citiesViewModel());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ActivityCImpl activityCImpl;

      private final int id;

      SwitchingProvider(DaggerMyApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.activityCImpl = activityCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // androidx.fragment.app.FragmentActivity 
          return (T) activityCImpl.fragmentActivity();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ViewModelCImpl extends MyApplication_HiltComponents.ViewModelC {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private ViewModelCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return Collections.<String, Provider<ViewModel>>emptyMap();
    }
  }

  private static final class ActivityRetainedCImpl extends MyApplication_HiltComponents.ActivityRetainedC {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerMyApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends MyApplication_HiltComponents.ServiceC {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerMyApplication_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // dev.alimansour.iweather.domain.repository.WeatherRepository 
        return (T) singletonC.weatherRepository();

        case 1: // dev.alimansour.iweather.data.remote.RemoteDataSource 
        return (T) singletonC.remoteDataSource();

        case 2: // dev.alimansour.iweather.data.remote.WeatherAPIService 
        return (T) singletonC.weatherAPIService();

        case 3: // retrofit2.Retrofit 
        return (T) singletonC.retrofit();

        case 4: // okhttp3.OkHttpClient 
        return (T) singletonC.okHttpClient();

        case 5: // okhttp3.logging.HttpLoggingInterceptor 
        return (T) RetrofitModule_ProvidesHttpLoggingInterceptorFactory.providesHttpLoggingInterceptor();

        case 6: // okhttp3.Interceptor 
        return (T) RetrofitModule_ProvideRequestInterceptorFactory.provideRequestInterceptor();

        case 7: // com.google.gson.Gson 
        return (T) RetrofitModule_ProvidesGsonFactory.providesGson();

        case 8: // dev.alimansour.iweather.data.local.LocalDataSource 
        return (T) singletonC.localDataSource();

        case 9: // dev.alimansour.iweather.data.local.WeatherDatabase 
        return (T) singletonC.weatherDatabase();

        default: throw new AssertionError(id);
      }
    }
  }
}
