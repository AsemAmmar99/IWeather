// Generated by Dagger (https://dagger.dev).
package dev.alimansour.iweather.presentation.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dev.alimansour.iweather.data.remote.RemoteDataSource;
import dev.alimansour.iweather.data.remote.WeatherAPIService;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideRemoteDataSourceFactory implements Factory<RemoteDataSource> {
  private final Provider<WeatherAPIService> weatherAPIServiceProvider;

  public AppModule_ProvideRemoteDataSourceFactory(
      Provider<WeatherAPIService> weatherAPIServiceProvider) {
    this.weatherAPIServiceProvider = weatherAPIServiceProvider;
  }

  @Override
  public RemoteDataSource get() {
    return provideRemoteDataSource(weatherAPIServiceProvider.get());
  }

  public static AppModule_ProvideRemoteDataSourceFactory create(
      Provider<WeatherAPIService> weatherAPIServiceProvider) {
    return new AppModule_ProvideRemoteDataSourceFactory(weatherAPIServiceProvider);
  }

  public static RemoteDataSource provideRemoteDataSource(WeatherAPIService weatherAPIService) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideRemoteDataSource(weatherAPIService));
  }
}
