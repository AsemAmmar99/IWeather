// Generated by Dagger (https://dagger.dev).
package dev.alimansour.iweather.presentation.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RetrofitModule_ProvidesOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider;

  private final Provider<Interceptor> requestInterceptorProvider;

  public RetrofitModule_ProvidesOkHttpClientFactory(
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider,
      Provider<Interceptor> requestInterceptorProvider) {
    this.httpLoggingInterceptorProvider = httpLoggingInterceptorProvider;
    this.requestInterceptorProvider = requestInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return providesOkHttpClient(httpLoggingInterceptorProvider.get(), requestInterceptorProvider.get());
  }

  public static RetrofitModule_ProvidesOkHttpClientFactory create(
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider,
      Provider<Interceptor> requestInterceptorProvider) {
    return new RetrofitModule_ProvidesOkHttpClientFactory(httpLoggingInterceptorProvider, requestInterceptorProvider);
  }

  public static OkHttpClient providesOkHttpClient(HttpLoggingInterceptor httpLoggingInterceptor,
      Interceptor requestInterceptor) {
    return Preconditions.checkNotNullFromProvides(RetrofitModule.INSTANCE.providesOkHttpClient(httpLoggingInterceptor, requestInterceptor));
  }
}
