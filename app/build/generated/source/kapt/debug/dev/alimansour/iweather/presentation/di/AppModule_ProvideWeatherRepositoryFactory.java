// Generated by Dagger (https://dagger.dev).
package dev.alimansour.iweather.presentation.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dev.alimansour.iweather.data.local.LocalDataSource;
import dev.alimansour.iweather.data.remote.RemoteDataSource;
import dev.alimansour.iweather.domain.repository.WeatherRepository;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideWeatherRepositoryFactory implements Factory<WeatherRepository> {
  private final Provider<RemoteDataSource> remoteDataSourceProvider;

  private final Provider<LocalDataSource> localDataSourceProvider;

  public AppModule_ProvideWeatherRepositoryFactory(
      Provider<RemoteDataSource> remoteDataSourceProvider,
      Provider<LocalDataSource> localDataSourceProvider) {
    this.remoteDataSourceProvider = remoteDataSourceProvider;
    this.localDataSourceProvider = localDataSourceProvider;
  }

  @Override
  public WeatherRepository get() {
    return provideWeatherRepository(remoteDataSourceProvider.get(), localDataSourceProvider.get());
  }

  public static AppModule_ProvideWeatherRepositoryFactory create(
      Provider<RemoteDataSource> remoteDataSourceProvider,
      Provider<LocalDataSource> localDataSourceProvider) {
    return new AppModule_ProvideWeatherRepositoryFactory(remoteDataSourceProvider, localDataSourceProvider);
  }

  public static WeatherRepository provideWeatherRepository(RemoteDataSource remoteDataSource,
      LocalDataSource localDataSource) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideWeatherRepository(remoteDataSource, localDataSource));
  }
}
